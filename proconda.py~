### CALCULA PARAMETROS DE ONDA NO DOMINIO DO TEMPO E FREQUENCIA ###
# Desenvolvido por: Henrique P. P. Pereira - pereira.henriquep@gmail.com
# Data da ultima modificacao: 20/05/2014
# ================================================================================== #
# Funcao 'ondat': Processamento de dados de onda no dominio do tempo
# Funcao 'ondaf': Processamento de dados de onda no dominio da frequencia
# ================================================================================== #

import numpy as np
from matplotlib import mlab

#import para o relatorio
from numpy import *
from pylab import *

#Espectro simples
def espec1(x,nfft,fs):

	"""
	#======================================================================#
	#
	# Calcula o espectro simples de uma serie real
	#
	# Dados de entrada: x = serie real
	#                   nfft - Numero de pontos utilizado para o calculo da FFT
	#                   fs - frequencia de amostragem
	#
	# Dados de saida: [aa] - col 0: vetor de frequencia
	#                        col 1: autoespectro
	#                        col 2: intervalo de confianca inferior
	#                        col 3: intervalo de confianca superior
	#
	# Infos:	detrend - mean
	#			window - hanning
	#			noverlap (welch) - 50%
	#
	#======================================================================#
	"""

	#calculo do espectro
	sp = mlab.psd(x,NFFT=nfft,Fs=fs,detrend=mlab.detrend_mean,window=mlab.window_hanning,noverlap=nfft/2)
	f, sp = sp[1][1:],sp[0][1:]

	#graus de liberdade
	gl = len(x) / nfft * 2

	#intervalo de confianca 95%
	ici = sp * gl / 26.12
	ics = sp * gl / 5.63

	aa = np.array([f,sp,ici,ics]).T

	return aa

#Espectro cruzado
def espec2(x,y,nfft,fs):

	"""
	# ================================================================================== #
	#
	# Calcula o espectro cruzado entre duas series reais
	#
	# Dados de entrada: x = serie real 1 (potencia de 2)
	#                   y = serie real 2 (potencia de 2)
	#                   nfft - Numero de pontos utilizado para o calculo da FFT
	#                   fs - frequencia de amostragem
	#
	# Dados de saida: [aa2] - col 0: vetor de frequencia
	#                         col 1: amplitude do espectro cruzado
	#                         col 2: co-espectro
	#                         col 3: quad-espectro
	#                         col 4: espectro de fase
	#                         col 5: espectro de coerencia
	#                         col 6: intervalo de confianca inferior do espectro cruzado
	#                         col 7: intervalo de confianca superior do espectro cruzado
	#                         col 8: intervalo de confianca da coerencia
	#
	# Infos:	detrend - mean
	#			window - hanning
	#			noverlap - 50%
	#
	# ================================================================================== #
	"""

	#cross-spectral density - welch method (complex valued)
	sp = mlab.csd(x,y,NFFT=nfft,Fs=fs,detrend=mlab.detrend_mean,window=mlab.window_hanning,noverlap=nfft/2)
	f = sp[1][1:]
	sp2 = sp[0][1:]

	#co e quad espectro (real e imag) - verificar com parente
	co = np.real(sp2)
	qd = np.imag(sp2)

	#phase (angle function)
	ph = np.angle(sp2,deg=True)

	#ecoherence between x and y (0-1)
	coer = mlab.cohere(x,y,NFFT=nfft,Fs=fs,detrend=mlab.detrend_mean,window=mlab.window_hanning,noverlap=nfft/2)
	coer = coer[0][1:]

	#intervalo de confianca para a amplitude do espectro cruzado - 95%
	ici = sp2 * 14 /26.12
	ics = sp2 * 14 /5.63

	#intervalo de confianca para coerencia
	icc = np.zeros(len(sp2))
	icc[:] = 1 - (0.05 ** (1 / (14 / 2.0 - 1)))

	aa2 = np.array([f,sp2,co,qd,ph,coer,ici,ics,icc]).T

	return aa2



def numeronda(h,deltaf,reg):

	'''
	# ================================================================================== #
	#
	# Calcula o numero de onda (k)
	#
	# Dados de entrada: h - profundidade
	#	  			    deltaf - vetor de frequencia
	#				    reg - comprimento do vetor de frequencia
	#
	# Dados de saida: k - vetor numero de onda
	#
	# ================================================================================== #
	'''

	#gravidade
	g = 9.8

	#vetor numero de onda a ser criado
	k = []

	#k anterior
	kant = 0.001

	#k posterior
	kpos = 0.0011

	for j in range(reg):
		sigma = (2*np.pi*deltaf[j])**2
		while abs(kpos - kant) > 0.001:
			kant = kpos
			dfk = g*kant*h*(1/np.cosh(kant*h))**2+g+np.tanh(kant*h)
			fk = g*kant*np.tanh(kant*h) - sigma
			kpos = kant - fk/dfk
		kant = kpos - 0.002
		k.append(kpos)
	return k


#Processamento no dominio do tempo
def ondat(t,eta,h):

	'''
	#======================================================================#
	#
	# Calcula parametros de onda no dominio do tempo
	#
	# Dados de entrada: t - vetor de tempo  
	#                   eta - vetor de elevacao
	#                   h - profundidade
	#
	# Dados de saida: pondat = [Hs,H10,Hmax,THmax,Tmed,]
	#				  Hs - altura significativa
	#                 H10 - altura de 1/10 das maiores
	#                 Hmax - altura maxima
	#                 THmax - periodo associado a altura maxima
	#                 Tmed - periodo medio
	#
	#======================================================================#
	'''

	#retira a media
	eta = eta - np.mean(eta)

	#criando os vetores H(altura),Cr(crista),Ca(cavado),T (periodo)
	Cr = []
	Ca = []
	H = []
	T = []

	#acha os indices que cruzam o zero
	z = np.where(np.diff(np.sign(eta)))[0]

	#zeros ascendentes e descendentes
	zas=z[0::2]
	zde=z[1::2]

	#calcula ondas individuas
	for i in range(0,len(zas)-1):
	    onda = eta[zas[i]:(zas[i+1])+1]
	    cr = np.max(onda)
	    Cr.append(cr)
	    ca = np.min(onda)
	    Ca.append(ca)
	    H.append(cr + np.abs(ca))
	    T.append(((zas[i+1])+1) - zas[i])

	#coloca as alturas em ordem crescente
	Hss = np.sort(H)
	Hss = np.flipud(Hss)

	#calcula a altura significativa (H 1/3)
	div = len(Hss) / 3
	Hs = np.mean(Hss[0:div+1])
	
	#calcula a altura das 1/10 maiores (H 1/10)
	div1 = len(Hss) / 10
	H10 = np.mean(Hss[0:div1+1]) #altura da media das um decimo maiores
	
	#altura maxima
	Hmax = np.max(H)
	
	#periodo medio
	Tmed = np.mean(T)
	
	#calcula periodo associado a altura maxima
	ind = np.where(H == Hmax)[0][0]
	THmax = T[ind]

	#parametros de onda no tempo
	pondat = np.array([Hs,H10,Hmax,Tmed,THmax])

	return Hs,H10,Hmax,Tmed,THmax

#Processamento no dominio da frequencia
def ondaf(eta,etax,etay,h,nfft,fs):

	"""
	#======================================================================#
	#
	# Calcula parametros de onda no dominio da frequencia
	#
	# Dados de entrada: eta - vetor de elevacao
	#                   etax - vetor de deslocamento em x
	#                   etay - vetor de deslocamento em y
	#					h - profundidade
	#					nfft - Numero de pontos utilizado para o calculo da FFT
	#                   fs - frequencia de amostragem
	#
	# Dados de saida: pondaf = [hm0 tp dp]	
	#
	#======================================================================#
	"""

	#espectro simples
	sn = espec1(eta,nfft,fs)
	snx = espec1(etax,nfft,fs)
	sny = espec1(etay,nfft,fs)

	#espectros cruzados
	snn = espec2(eta,eta,nfft,fs)
	snnx = espec2(eta,etax,nfft,fs)
	snny = espec2(eta,etay,nfft,fs)
	snxny = espec2(etax,etay,nfft,fs)
	snxnx = espec2(etax,etax,nfft,fs)
	snyny = espec2(etay,etay,nfft,fs)

	#vetor de frequencia
	f = sn[:,0]

	#deltaf
	df = f[1] - f[0]

	#calculo do numero de onda
	k = numeronda(h,f,len(f))
	k = np.array(k)

	#calculo dos coeficientes de fourier - NDBC 96_01 e Steele (1992)
	c = snx[:,1] + sny[:,1]
	cc = np.sqrt(sn[:,1] * (c))

	a1 = snnx[:,3] / cc
	b1 = snny[:,3] / cc

	a2 = (snx[:,1] - sny[:,1]) / c
	b2 = 2 * snxny[:,2] / c

	#calcula direcao de onda
	#mean direction
	dire1 = np.array([np.angle(np.complex(b1[i],a1[i]),deg=True) for i in range(len(a1))])

	#principal direction
	dire2 = 0.5 * np.array([np.angle(np.complex(b2[i],a2[i]),deg=True) for i in range(len(a2))])

	#condicao para valores maiores que 360 e menores que 0
	dire1[np.where(dire1 < 0)] = dire1[np.where(dire1 < 0)] + 360
	dire1[np.where(dire1 > 360)] = dire1[np.where(dire1 > 360)] - 360

	dire2[np.where(dire2 < 0)] = dire2[np.where(dire2 < 0)] + 360
	dire2[np.where(dire2 > 360)] = dire2[np.where(dire2 > 360)] - 360

	#acha o indice da frequencia de pico
	ind = np.where(sn[:,1] == np.max(sn[:,1]))[0]

	#periodo de pico
	tp = (1. / f[ind])[0]

	#momento espectral de ordem zero total - m0
	m0 = np.sum(sn[:,1]) * df

	#calculo da altura significativa
	hm0 = 4.01 * np.sqrt(m0)

	#direcao do periodo de pico
	dp = dire1[ind][0]

	#Espalhamento direcional
	#Formula do sigma1 do livro Tucker&Pitt(2001) "Waves in Ocean Engineering" pags 196-198
	c1 = np.sqrt(a1 ** 2 + b1 **2)
	c2 = np.sqrt(a2 ** 2 + b2 ** 2)
	
	s1 = c1 / (1-c1)
	s2 = (1 + 3 * c2 + np.sqrt(1 + 14 * c2 + c2 ** 2)) / (2 * (1 - c2))
	
	sigma1 = np.sqrt(2 - 2 * c1) * 180 / np.pi
	sigma2 = np.sqrt((1 - c2) / 2) * 180 / np.pi

	sigma1p = np.real(sigma1[ind])[0]
	sigma2p = np.real(sigma2[ind])[0]

	# pondaf = np.array([hm0, tp, dp, sigma1p, sigma2p])

	return hm0, tp, dp, sigma1p, sigma2p, f, df, k, sn, snx, sny, snn, snnx, snny, snxny, snxnx, snyny, a1, b1, a2, b2, dire1, dire2

def ondap(hm0,tp,dp,sn,dire1,df):

	'''
	# Programa para calcular parametros
	# de onda nas particoes de sea e swell
	#
	# desenvolvido para 32 gl
	#
	# divide o espectro em 2 partes: 
	# parte 1 - 8.33 a 50 seg
	# parte 2 - 1.56 a 7.14 seg
	#
	# calcula o periodo de pico de cada particao, e despreza o
	# pico 2 (menos energetico) se a energia for inferior a 15% da
	# energia do pico 1 (mais energetico)
	'''
	#vetor de frequencia e energia
	f,s = sn[:,[0,1]].T

	# seleciona os picos espectrais - considera somente 2 picos
	g1=np.diff(s)
	g1=np.sign(g1)
	g1=np.diff(g1)
	g1=np.concatenate(([0],g1))
	g2=np.where(g1==-2)[0]
	picos=1 # a principio e unimodal
	l=np.size(g2)

	# inicializar considerando ser unimodal
	hm02 = np.nan #9999
	tp2 = np.nan #9999
	dp2 = np.nan #9999
	hm01 = hm0
	tp1 = tp 
	dp1 = dp 

	if l > 1: #verificando espacamento entre picos (espacamento maior que 4 df)
		fr=np.argsort(s[g2])[::-1] #frequencia decrescente
		er=np.sort(s[g2])[::-1] # energia decrescente

		if (f[g2[fr[1]]]-f[g2[fr[0]]]) > 4*(f[1]-f[0]) and (er[1]/er[0] >= 0.15): #adota criterio de 4*deltaf
			picos=2
	    
	    # calcular o Hs dos picos pegando a cava e dividindo em pico 1 e pico 2
		if picos == 2:
			n1=g2[0] #pico mais energetico
			n2=g2[1] #pico menos energetico
			nc=np.where(g1[n1:n2]==2) #indice da cava

			#particao do swell e sea
			swell = range(n1+nc+1)
			sea = range(n1+nc+1,len(s))

			#maxima energia do swell
			esw = max(s[swell])

			#maxima energia do sea
			ese = max(s[sea])

			#indice do pico do swell
			isw = np.where(s==esw)[0][0]

			#indice do pico do sea
			ise = np.where(s==ese)[0][0]

			#altura sig. do swell
			hm0sw = 4.01 * np.sqrt(sum(s[swell]) * df)

			#altura sig. do sea
			hm0se = 4.01 * np.sqrt(sum(s[sea]) * df)

			#periodo de pico do swell
			tpsw = 1./f[isw]

			#periodo de pico do sea
			tpse = 1./f[ise]

			#direcao do swell
			dpsw = dire1[isw]

			#direcao do sea
			dpse = dire1[ise]

			#seleciona pico 1 como mais energetico
			# e pico 2 com o menos energetico
			if esw > ese:
				en1 = esw ; en2 = ese
				hm01 = hm0sw ; hm02 = hm0se
				tp1 = tpsw ; tp2 = tpse
				dp1 = dpsw ; dp2 = dpse
			else:
				en1 = ese ; en2 = esw
				hm01 = hm0se ; hm02 = hm0sw
				tp1 = tpse ; tp2 = tpsw
				dp1 = dpse ; dp2 = dpsw
        

      
	# pondaf1 = np.array([hm01, tp1, dp1, hm02, tp2, dp2])

	return hm01, tp1, dp1, hm02, tp2, dp2 #pondaf1



## Cria relatorio para ser impresso no terminal



def report(f,lista,listap,listac,listai,flagb,flagp,h,local,latlon,idargos,idwmo):


    # ================================================================================== #
    # Quantifica dados reprovados por teste
    # cria matriz de flags por variavel
    # ================================================================================== #


    # ================================================================================== #
    # flags dos dados brutos

    #heave
    feta = [] ; [feta.append(list(flagb[i,1])) for i in range(len(flagb))]
    feta = np.array(feta)
    #dsp.EO
    fetax = [] ; [fetax.append(list(flagb[i,2])) for i in range(len(flagb))]
    fetax = np.array(fetax)

    #dsp.NS
    fetay = [] ; [fetay.append(list(flagb[i,3])) for i in range(len(flagb))]
    fetay = np.array(fetay)

    # ================================================================================== #
    # quantifica flags dos dados brutos

    #eta
    etaa = np.zeros(feta.shape[1])
    etar = np.zeros(feta.shape[1])
    etas = np.zeros(feta.shape[1])

    #etax
    etaxa = np.zeros(fetax.shape[1])
    etaxr = np.zeros(fetax.shape[1])
    etaxs = np.zeros(fetax.shape[1])

    #etay
    etaya = np.zeros(fetay.shape[1])
    etayr = np.zeros(fetay.shape[1])
    etays = np.zeros(fetay.shape[1])

    #varia quantidade de testes
    for i in range(feta.shape[1]):

        #aprovados
        etaa[i] = len(np.where(feta[:,i] == '1')[0])
        etaxa[i] = len(np.where(fetax[:,i] == '1')[0])
        etaya[i] = len(np.where(fetay[:,i] == '1')[0])
        
        #suspeitos
        etas[i] = len(np.where(feta[:,i] == '3')[0])
        etaxs[i] = len(np.where(fetax[:,i] == '3')[0])
        etays[i] = len(np.where(fetay[:,i] == '3')[0])
        
        #reprovados
        etar[i] = len(np.where(feta[:,i] == '4')[0])
        etaxr[i] = len(np.where(fetax[:,i] == '4')[0])
        etayr[i] = len(np.where(fetay[:,i] == '4')[0])


    # ================================================================================== #
    # flags dados processados

    #hs
    fhs = [] ; [fhs.append(list(flagp[i,1])) for i in range(len(flagp))]
    fhs = np.array(fhs)

    #h10
    fh10 = [] ; [fh10.append(list(flagp[i,2])) for i in range(len(flagp))]
    fh10 = np.array(fh10)

    #hmax
    fhmax = [] ; [fhmax.append(list(flagp[i,3])) for i in range(len(flagp))]
    fhmax = np.array(fhmax)

    #tmed
    ftmed = [] ; [ftmed.append(list(flagp[i,4])) for i in range(len(flagp))]
    ftmed = np.array(ftmed)

    #thmax
    fthmax = [] ; [fthmax.append(list(flagp[i,5])) for i in range(len(flagp))]
    fthmax = np.array(fthmax)

    #hm0
    fhm0 = [] ; [fhm0.append(list(flagp[i,6])) for i in range(len(flagp))]
    fhm0 = np.array(fhm0)

    #tp
    ftp = [] ; [ftp.append(list(flagp[i,7])) for i in range(len(flagp))]
    ftp = np.array(ftp)

    #dp
    fdp = [] ; [fdp.append(list(flagp[i,8])) for i in range(len(flagp))]
    fdp = np.array(fdp)

    #sigma1p
    fsigma1p = [] ; [fsigma1p.append(list(flagp[i,9])) for i in range(len(flagp))]
    fsigma1p = np.array(fsigma1p)

    #sigma2p
    fsigma2p = [] ; [fsigma2p.append(list(flagp[i,10])) for i in range(len(flagp))]
    fsigma2p = np.array(fsigma2p)

    #hm01
    fhm01 = [] ; [fhm01.append(list(flagp[i,11])) for i in range(len(flagp))]
    fhm01 = np.array(fhm01)

    #tp1
    ftp1 = [] ; [ftp1.append(list(flagp[i,12])) for i in range(len(flagp))]
    ftp1 = np.array(ftp1)

    #tp1
    fdp1 = [] ; [fdp1.append(list(flagp[i,13])) for i in range(len(flagp))]
    fdp1 = np.array(fdp1)

    #hm02
    fhm02 = [] ; [fhm02.append(list(flagp[i,14])) for i in range(len(flagp))]
    fhm02 = np.array(fhm02)
    
    #tp1
    ftp2 = [] ; [ftp2.append(list(flagp[i,15])) for i in range(len(flagp))]
    ftp2 = np.array(ftp2)

    #dp1
    fdp2 = [] ; [fdp2.append(list(flagp[i,16])) for i in range(len(flagp))]
    fdp2 = np.array(fdp2)


    # ================================================================================== #
    # quantifica flags dos dados processados

    # aprovados
    hsa = np.zeros(fhs.shape[1])
    h10a = np.zeros(fh10.shape[1])
    hmaxa = np.zeros(fhmax.shape[1])
    tmeda = np.zeros(ftmed.shape[1])
    thmaxa = np.zeros(fthmax.shape[1])
    hm0a = np.zeros(fhm0.shape[1])
    tpa = np.zeros(ftp.shape[1])
    dpa = np.zeros(fdp.shape[1])
    sigma1pa = np.zeros(fsigma1p.shape[1])
    sigma2pa = np.zeros(fsigma2p.shape[1])
    hm01a = np.zeros(fhm01.shape[1])
    tp1a = np.zeros(ftp1.shape[1])
    dp1a = np.zeros(fdp1.shape[1])
    hm02a = np.zeros(fhm02.shape[1])
    tp2a = np.zeros(ftp2.shape[1])
    dp2a = np.zeros(fdp2.shape[1])

    #nao avaliado
    hsn = np.zeros(fhs.shape[1])
    h10n = np.zeros(fh10.shape[1])
    hmaxn = np.zeros(fhmax.shape[1])
    tmedn = np.zeros(ftmed.shape[1])
    thmaxn = np.zeros(fthmax.shape[1])
    hm0n = np.zeros(fhm0.shape[1])
    tpn = np.zeros(ftp.shape[1])
    dpn = np.zeros(fdp.shape[1])
    sigma1pn = np.zeros(fsigma1p.shape[1])
    sigma2pn = np.zeros(fsigma2p.shape[1])
    hm01n = np.zeros(fhm01.shape[1])
    tp1n = np.zeros(ftp1.shape[1])
    dp1n = np.zeros(fdp1.shape[1])
    hm02n = np.zeros(fhm02.shape[1])
    tp2n = np.zeros(ftp2.shape[1])
    dp2n = np.zeros(fdp2.shape[1])

    #suspeito
    hss = np.zeros(fhs.shape[1])
    h10s = np.zeros(fh10.shape[1])
    hmaxs = np.zeros(fhmax.shape[1])
    tmeds = np.zeros(ftmed.shape[1])
    thmaxs = np.zeros(fthmax.shape[1])
    hm0s = np.zeros(fhm0.shape[1])
    tps = np.zeros(ftp.shape[1])
    dps = np.zeros(fdp.shape[1])
    sigma1ps = np.zeros(fsigma1p.shape[1])
    sigma2ps = np.zeros(fsigma2p.shape[1])
    hm01s = np.zeros(fhm01.shape[1])
    tp1s = np.zeros(ftp1.shape[1])
    dp1s = np.zeros(fdp1.shape[1])
    hm02s = np.zeros(fhm02.shape[1])
    tp2s = np.zeros(ftp2.shape[1])
    dp2s = np.zeros(fdp2.shape[1])

    #reprovados
    hsr = np.zeros(fhs.shape[1])
    h10r = np.zeros(fh10.shape[1])
    hmaxr = np.zeros(fhmax.shape[1])
    tmedr = np.zeros(ftmed.shape[1])
    thmaxr = np.zeros(fthmax.shape[1])
    hm0r = np.zeros(fhm0.shape[1])
    tpr = np.zeros(ftp.shape[1])
    dpr = np.zeros(fdp.shape[1])
    sigma1pr = np.zeros(fsigma1p.shape[1])
    sigma2pr = np.zeros(fsigma2p.shape[1])
    hm01r = np.zeros(fhm01.shape[1])
    tp1r = np.zeros(ftp1.shape[1])
    dp1r = np.zeros(fdp1.shape[1])
    hm02r = np.zeros(fhm02.shape[1])
    tp2r = np.zeros(ftp2.shape[1])
    dp2r = np.zeros(fdp2.shape[1])

    #valor faltando
    hsf = np.zeros(fhs.shape[1])
    h10f = np.zeros(fh10.shape[1])
    hmaxf = np.zeros(fhmax.shape[1])
    tmedf = np.zeros(ftmed.shape[1])
    thmaxf = np.zeros(fthmax.shape[1])
    hm0f = np.zeros(fhm0.shape[1])
    tpf = np.zeros(ftp.shape[1])
    dpf = np.zeros(fdp.shape[1])
    sigma1pf = np.zeros(fsigma1p.shape[1])
    sigma2pf = np.zeros(fsigma2p.shape[1])
    hm01f = np.zeros(fhm01.shape[1])
    tp1f = np.zeros(ftp1.shape[1])
    dp1f = np.zeros(fdp1.shape[1])
    hm02f = np.zeros(fhm02.shape[1])
    tp2f = np.zeros(ftp2.shape[1])
    dp2f = np.zeros(fdp2.shape[1])

    #varia a quantidade de testes
    for i in range(fhs.shape[1]):

        #aprovados
        hsa[i] = len(np.where(fhs[:,i] == '1')[0])
        h10a[i] = len(np.where(fh10[:,i] == '1')[0])
        hmaxa[i] = len(np.where(fhmax[:,i] == '1')[0])
        tmeda[i] = len(np.where(ftmed[:,i] == '1')[0])
        thmaxa[i] = len(np.where(fthmax[:,i] == '1')[0])
        hm0a[i] = len(np.where(fhm0[:,i] == '1')[0])
        tpa[i] = len(np.where(ftp[:,i] == '1')[0])
        dpa[i] = len(np.where(fdp[:,i] == '1')[0])
        sigma1pa[i] = len(np.where(fsigma1p[:,i] == '1')[0])
        sigma2pa[i] = len(np.where(fsigma2p[:,i] == '1')[0])
        hm01a[i] = len(np.where(fhm01[:,i] == '1')[0])
        tp1a[i] = len(np.where(ftp1[:,i] == '1')[0])
        dp1a[i] = len(np.where(fdp1[:,i] == '1')[0])
        hm02a[i] = len(np.where(fhm02[:,i] == '1')[0])
        tp2a[i] = len(np.where(ftp2[:,i] == '1')[0])
        dp2a[i] = len(np.where(fdp2[:,i] == '1')[0])

        #nao avaliado
        hsn[i] = len(np.where(fhs[:,i] == '2')[0])
        h10n[i] = len(np.where(fh10[:,i] == '2')[0])
        hmaxn[i] = len(np.where(fhmax[:,i] == '2')[0])
        tmedn[i] = len(np.where(ftmed[:,i] == '2')[0])
        thmaxn[i] = len(np.where(fthmax[:,i] == '2')[0])
        hm0n[i] = len(np.where(fhm0[:,i] == '2')[0])
        tpn[i] = len(np.where(ftp[:,i] == '2')[0])
        dpn[i] = len(np.where(fdp[:,i] == '2')[0])
        sigma1pn[i] = len(np.where(fsigma1p[:,i] == '2')[0])
        sigma2pn[i] = len(np.where(fsigma2p[:,i] == '2')[0])
        hm01n[i] = len(np.where(fhm01[:,i] == '2')[0])
        tp1n[i] = len(np.where(ftp1[:,i] == '2')[0])
        dp1n[i] = len(np.where(fdp1[:,i] == '2')[0])
        hm02n[i] = len(np.where(fhm02[:,i] == '2')[0])
        tp2n[i] = len(np.where(ftp2[:,i] == '2')[0])
        dp2n[i] = len(np.where(fdp2[:,i] == '2')[0])

        #suspeitos
        hss[i] = len(np.where(fhs[:,i] == '3')[0])
        h10s[i] = len(np.where(fh10[:,i] == '3')[0])
        hmaxs[i] = len(np.where(fhmax[:,i] == '3')[0])
        tmeds[i] = len(np.where(ftmed[:,i] == '3')[0])
        thmaxs[i] = len(np.where(fthmax[:,i] == '3')[0])
        hm0s[i] = len(np.where(fhm0[:,i] == '3')[0])
        tps[i] = len(np.where(ftp[:,i] == '3')[0])
        dps[i] = len(np.where(fdp[:,i] == '3')[0])
        sigma1ps[i] = len(np.where(fsigma1p[:,i] == '3')[0])
        sigma2ps[i] = len(np.where(fsigma2p[:,i] == '3')[0])
        hm01s[i] = len(np.where(fhm01[:,i] == '3')[0])
        tp1s[i] = len(np.where(ftp1[:,i] == '3')[0])
        dp1s[i] = len(np.where(fdp1[:,i] == '3')[0])
        hm02s[i] = len(np.where(fhm02[:,i] == '3')[0])
        tp2s[i] = len(np.where(ftp2[:,i] == '3')[0])
        dp2s[i] = len(np.where(fdp2[:,i] == '3')[0])

        #dado reprovado
        hsr[i] = len(np.where(fhs[:,i] == '4')[0])
        h10r[i] = len(np.where(fh10[:,i] == '4')[0])
        hmaxr[i] = len(np.where(fhmax[:,i] == '4')[0])
        tmedr[i] = len(np.where(ftmed[:,i] == '4')[0])
        thmaxr[i] = len(np.where(fthmax[:,i] == '4')[0])
        hm0r[i] = len(np.where(fhm0[:,i] == '4')[0])
        tpr[i] = len(np.where(ftp[:,i] == '4')[0])
        dpr[i] = len(np.where(fdp[:,i] == '4')[0])
        sigma1pr[i] = len(np.where(fsigma1p[:,i] == '4')[0])
        sigma2pr[i] = len(np.where(fsigma2p[:,i] == '4')[0])
        hm01r[i] = len(np.where(fhm01[:,i] == '4')[0])
        tp1r[i] = len(np.where(ftp1[:,i] == '4')[0])
        dp1r[i] = len(np.where(fdp1[:,i] == '4')[0])
        hm02r[i] = len(np.where(fhm02[:,i] == '4')[0])
        tp2r[i] = len(np.where(ftp2[:,i] == '4')[0])
        dp2r[i] = len(np.where(fdp2[:,i] == '4')[0])


        #dado faltando
        hsf[i] = len(np.where(fhs[:,i] == '9')[0])
        h10f[i] = len(np.where(fh10[:,i] == '9')[0])
        hmaxf[i] = len(np.where(fhmax[:,i] == '9')[0])
        tmedf[i] = len(np.where(ftmed[:,i] == '9')[0])
        thmaxf[i] = len(np.where(fthmax[:,i] == '9')[0])
        hm0f[i] = len(np.where(fhm0[:,i] == '9')[0])
        tpf[i] = len(np.where(ftp[:,i] == '9')[0])
        dpf[i] = len(np.where(fdp[:,i] == '9')[0])
        sigma1pf[i] = len(np.where(fsigma1p[:,i] == '9')[0])
        sigma2pf[i] = len(np.where(fsigma2p[:,i] == '9')[0])
        hm01f[i] = len(np.where(fhm01[:,i] == '9')[0])
        tp1f[i] = len(np.where(ftp1[:,i] == '9')[0])
        dp1f[i] = len(np.where(fdp1[:,i] == '9')[0])
        hm02f[i] = len(np.where(fhm02[:,i] == '9')[0])
        tp2f[i] = len(np.where(ftp2[:,i] == '9')[0])
        dp2f[i] = len(np.where(fdp2[:,i] == '9')[0])


    # ================================================================================== #
    # Cria e salva relatorio

    regua1 = 50 * '-'
    regua2 = 50 * '='


    #salva relatorio
    print >> f, (

        'Relatorio de Controle de Qualidade de dados de Ondas \n'
        'Laboratorio de Instrumentacao Oceanografica - LIOc \n'
        'COPPE/UFRJ \n \n'

        'Boia Axys - PNBOIA/MB \n'
        'ID Argos: ' + str(idargos) + '\n'
        'ID WMO: ' + str(idwmo) + '\n'
        'Localizacao: ' + local + '\n'
        'Lat/Lon: ' + latlon + '\n'
        'Profundidade: ' + str(h) + ' m \n'
        'Data inicial: ' + listap[0][6:8]+'/'+listap[0][4:6]+'/'+listap[0][0:4]+' - '+listap[0][8:10]+':'+listap[0][10:12] + '\n'
        'Data final: '   + listap[-1][6:8]+'/'+listap[-1][4:6]+'/'+listap[-1][0:4]+' - '+listap[-1][8:10]+':'+listap[-1][10:12] + '\n \n'

        'Numero de arquivos listados no diretorio: ' + str(len(lista)) + '\n'
        'Numero de series analisadas: '              + str(len(listap)) + '\n'
        'Numero de series aprovadas no CQ de Curto-Termo: '          + str(len(listac)) + '\n'
        'Numero de series reprovadas no CQ de Curto-Termo: '          + str(len(listai)) + '\n \n'

        'Numero de Testes de CQ:' '\n'
        '- Brutos: '      + str(len(flagb[0][1])) + '\n'
        '- Processados: ' + str(len(flagp[0][1])) + '\n'


        # ================================================================================== #


        '\n' + regua2 + '\n'
        'Consistencia dos dados brutos'
        '\n' + regua2 + '\n'

        '\n' + regua1 + '\n'
        '** Teste 1 - Mensagem recebida **' '\n \n'

        '-- Eta --' '\n'
        'Aprovado: ' + str(int(etaa[0])) + '\n'
        'Suspeito: ' + str(int(etas[0])) + '\n'
        'Reprovado: ' + str(int(etar[0])) + '\n \n'

        '-- Dsp.EO --' '\n'
        'Aprovado: ' + str(int(etaxa[0])) + '\n'
        'Suspeito: ' + str(int(etaxs[0])) + '\n'
        'Reprovado: ' + str(int(etaxr[0])) + '\n \n'

        '-- Dsp.NS --' '\n'
        'Aprovado: ' + str(int(etaya[0])) + '\n'
        'Suspeito: ' + str(int(etays[0])) + '\n'
        'Reprovado: ' + str(int(etayr[0])) + '\n \n'

        '\n' + regua1 + '\n'
        '** Teste 2 - Comprimento da serie ** ' '\n \n'

        '-- Eta --' '\n'
        'Aprovado: ' + str(int(etaa[1])) + '\n'
        'Suspeito: ' + str(int(etas[1])) + '\n'
        'Reprovado: ' + str(int(etar[1])) + '\n \n'

        '-- Dsp.EO --' '\n'
        'Aprovado: ' + str(int(etaxa[1])) + '\n'
        'Suspeito: ' + str(int(etaxs[1])) + '\n'
        'Reprovado: ' + str(int(etaxr[1])) + '\n \n'

        '-- Dsp.NS --' '\n'
        'Aprovado: ' + str(int(etaya[1])) + '\n'
        'Suspeito: ' + str(int(etays[1])) + '\n'
        'Reprovado: ' + str(int(etayr[1])) + '\n \n'

        '\n' + regua1 + '\n'
        '** Teste 3 - Lacuna (Gap) ** ' '\n \n'

        '-- Eta --' '\n'
        'Aprovado: ' + str(int(etaa[2])) + '\n'
        'Suspeito: ' + str(int(etas[2])) + '\n'
        'Reprovado: ' + str(int(etar[2])) + '\n \n'

        '-- Dsp.EO --' '\n'
        'Aprovado: ' + str(int(etaxa[2])) + '\n'
        'Suspeito: ' + str(int(etaxs[2])) + '\n'
        'Reprovado: ' + str(int(etaxr[2])) + '\n \n'

        '-- Dsp.NS --' '\n'
        'Aprovado: ' + str(int(etaya[2])) + '\n'
        'Suspeito: ' + str(int(etays[2])) + '\n'
        'Reprovado: ' + str(int(etayr[2])) + '\n \n'

        '\n' + regua1 + '\n'
        '** Teste 4 - Spike ** ' '\n \n'

        '-- Eta --' '\n'
        'Aprovado: ' + str(int(etaa[3])) + '\n'
        'Suspeito: ' + str(int(etas[3])) + '\n'
        'Reprovado: ' + str(int(etar[3])) + '\n \n'

        '-- Dsp.EO --' '\n'
        'Aprovado: ' + str(int(etaxa[3])) + '\n'
        'Suspeito: ' + str(int(etaxs[3])) + '\n'
        'Reprovado: ' + str(int(etaxr[3])) + '\n \n'

        '-- Dsp.NS --' '\n'
        'Aprovado: ' + str(int(etaya[3])) + '\n'
        'Suspeito: ' + str(int(etays[3])) + '\n'
        'Reprovado: ' + str(int(etayr[3])) + '\n \n'

        '\n' + regua1 + '\n'
        '** Teste 5 - Flat ** ' '\n \n'

        '-- Eta --' '\n'
        'Aprovado: ' + str(int(etaa[4])) + '\n'
        'Suspeito: ' + str(int(etas[4])) + '\n'
        'Reprovado: ' + str(int(etar[4])) + '\n \n'

        '-- Dsp.EO --' '\n'
        'Aprovado: ' + str(int(etaxa[4])) + '\n'
        'Suspeito: ' + str(int(etaxs[4])) + '\n'
        'Reprovado: ' + str(int(etaxr[4])) + '\n \n'

        '-- Dsp.NS --' '\n'
        'Aprovado: ' + str(int(etaya[4])) + '\n'
        'Suspeito: ' + str(int(etays[4])) + '\n'
        'Reprovado: ' + str(int(etayr[4])) + '\n \n'

        '\n' + regua1 + '\n'
        '** Teste 6 - Consec. Nulos ** ' '\n \n'

        '-- Eta --' '\n'
        'Aprovado: ' + str(int(etaa[5])) + '\n'
        'Suspeito: ' + str(int(etas[5])) + '\n'
        'Reprovado: ' + str(int(etar[5])) + '\n \n'

        '-- Dsp.EO --' '\n'
        'Aprovado: ' + str(int(etaxa[5])) + '\n'
        'Suspeito: ' + str(int(etaxs[5])) + '\n'
        'Reprovado: ' + str(int(etaxr[5])) + '\n \n'

        '-- Dsp.NS --' '\n'
        'Aprovado: ' + str(int(etaya[5])) + '\n'
        'Suspeito: ' + str(int(etays[5])) + '\n'
        'Reprovado: ' + str(int(etayr[1])) + '\n \n'

        '\n' + regua1 + '\n'
        '** Teste 7 - Consec. Iguais ** ' '\n \n'

        '-- Eta --' '\n'
        'Aprovado: ' + str(int(etaa[6])) + '\n'
        'Suspeito: ' + str(int(etas[6])) + '\n'
        'Reprovado: ' + str(int(etar[6])) + '\n \n'

        '-- Dsp.EO --' '\n'
        'Aprovado: ' + str(int(etaxa[6])) + '\n'
        'Suspeito: ' + str(int(etaxs[6])) + '\n'
        'Reprovado: ' + str(int(etaxr[6])) + '\n \n'

        '-- Dsp.NS --' '\n'
        'Aprovado: ' + str(int(etaya[6])) + '\n'
        'Suspeito: ' + str(int(etays[6])) + '\n'
        'Reprovado: ' + str(int(etayr[6])) + '\n \n'

        '\n' + regua1 + '\n'
        '** Teste 8 - Faixa ** ' '\n \n'

        '-- Eta --' '\n'
        'Aprovado: ' + str(int(etaa[7])) + '\n'
        'Suspeito: ' + str(int(etas[7])) + '\n'
        'Reprovado: ' + str(int(etar[7])) + '\n \n'

        '-- Dsp.EO --' '\n'
        'Aprovado: ' + str(int(etaxa[7])) + '\n'
        'Suspeito: ' + str(int(etaxs[7])) + '\n'
        'Reprovado: ' + str(int(etaxr[7])) + '\n \n'

        '-- Dsp.NS --' '\n'
        'Aprovado: ' + str(int(etaya[7])) + '\n'
        'Suspeito: ' + str(int(etays[7])) + '\n'
        'Reprovado: ' + str(int(etayr[7])) + '\n \n'

        '\n' + regua1 + '\n'
        '** Teste 9 - Shift ** ' '\n \n'

        '-- Eta --' '\n'
        'Aprovado: ' + str(int(etaa[8])) + '\n'
        'Suspeito: ' + str(int(etas[8])) + '\n'
        'Reprovado: ' + str(int(etar[8])) + '\n \n'

        '-- Dsp.EO --' '\n'
        'Aprovado: ' + str(int(etaxa[8])) + '\n'
        'Suspeito: ' + str(int(etaxs[8])) + '\n'
        'Reprovado: ' + str(int(etaxr[8])) + '\n \n'

        '-- Dsp.NS --' '\n'
        'Aprovado: ' + str(int(etaya[8])) + '\n'
        'Suspeito: ' + str(int(etays[8])) + '\n'
        'Reprovado: ' + str(int(etayr[8])) + '\n \n'


        # ================================================================================== #

        '\n' + regua2 + '\n'
        'Consistencia dos dados processados'
        '\n' + regua2 + '\n'


        '\n' + regua1 + '\n'
        '** Teste 1 - Faixa **' '\n \n'

        '-- Hs --' '\n'
        'Aprovado: ' + str(int(hsa[0])) + '\n'
        'Faltando: ' + str(int(hsf[0])) + '\n'
        'Suspeito: ' + str(int(hss[0])) + '\n'
        'Reprovado: ' + str(int(hsr[0])) + '\n'
        'Nao avaliado: ' + str(int(hsn[0])) + '\n \n'

        '-- H1/10 --' '\n'
        'Aprovado: ' + str(int(h10a[0])) + '\n'
        'Faltando: ' + str(int(h10f[0])) + '\n'
        'Suspeito: ' + str(int(h10s[0])) + '\n'
        'Reprovado: ' + str(int(h10r[0])) + '\n'
        'Nao avaliado: ' + str(int(h10n[0])) + '\n \n'

        '-- Hmax --' '\n'
        'Aprovado: ' + str(int(hmaxa[0])) + '\n'
        'Faltando: ' + str(int(hmaxf[0])) + '\n'
        'Suspeito: ' + str(int(hmaxs[0])) + '\n'
        'Reprovado: ' + str(int(hmaxr[0])) + '\n'
        'Nao avaliado: ' + str(int(hmaxn[0])) + '\n \n'

        '-- Tmed --' '\n'
        'Aprovado: ' + str(int(tmeda[0])) + '\n'
        'Faltando: ' + str(int(tmedf[0])) + '\n'
        'Suspeito: ' + str(int(tmeds[0])) + '\n'
        'Reprovado: ' + str(int(tmedr[0])) + '\n'
        'Nao avaliado: ' + str(int(tmedn[0])) + '\n \n'

        '-- THmax --' '\n'
        'Aprovado: ' + str(int(thmaxa[0])) + '\n'
        'Faltando: ' + str(int(thmaxf[0])) + '\n'
        'Suspeito: ' + str(int(thmaxs[0])) + '\n'
        'Reprovado: ' + str(int(thmaxr[0])) + '\n'
        'Nao avaliado: ' + str(int(thmaxn[0])) + '\n \n'

        '-- Hm0 --' '\n'
        'Aprovado: ' + str(int(hm0a[0])) + '\n'
        'Faltando: ' + str(int(hm0f[0])) + '\n'
        'Suspeito: ' + str(int(hm0s[0])) + '\n'
        'Reprovado: ' + str(int(hm0r[0])) + '\n'
        'Nao avaliado: ' + str(int(hm0n[0])) + '\n \n'

        '-- Tp --' '\n'
        'Aprovado: ' + str(int(tpa[0])) + '\n'
        'Faltando: ' + str(int(tpf[0])) + '\n'
        'Suspeito: ' + str(int(tps[0])) + '\n'
        'Reprovado: ' + str(int(tpr[0])) + '\n'
        'Nao avaliado: ' + str(int(tpn[0])) + '\n \n'

        '-- Dp --' '\n'
        'Aprovado: ' + str(int(dpa[0])) + '\n'
        'Faltando: ' + str(int(dpf[0])) + '\n'
        'Suspeito: ' + str(int(dps[0])) + '\n'
        'Reprovado: ' + str(int(dpr[0])) + '\n'
        'Nao avaliado: ' + str(int(dpn[0])) + '\n \n'

        '-- Sigma1p --' '\n'
        'Aprovado: ' + str(int(sigma1pa[0])) + '\n'
        'Faltando: ' + str(int(sigma1pf[0])) + '\n'
        'Suspeito: ' + str(int(sigma1ps[0])) + '\n'
        'Reprovado: ' + str(int(sigma1pr[0])) + '\n'
        'Nao avaliado: ' + str(int(sigma1pn[0])) + '\n \n'

        '-- Sigma2p --' '\n'
        'Aprovado: ' + str(int(sigma2pa[0])) + '\n'
        'Faltando: ' + str(int(sigma2pf[0])) + '\n'
        'Suspeito: ' + str(int(sigma2ps[0])) + '\n'
        'Reprovado: ' + str(int(sigma2pr[0])) + '\n'
        'Nao avaliado: ' + str(int(sigma2pn[0])) + '\n \n'

        '-- Hm01 / Hm02 --' '\n'
        'Aprovado: ' + str(int(hm01a[0])) + '\n'
        'Faltando: ' + str(int(hm01f[0])) + '\n'
        'Suspeito: ' + str(int(hm01s[0])) + '\n'
        'Reprovado: ' + str(int(hm01r[0])) + '\n'
        'Nao avaliado: ' + str(int(hm01n[0])) + '\n \n'

        '-- Tp1 / Tp2 --' '\n'
        'Aprovado: ' + str(int(tp1a[0])) + '\n'
        'Faltando: ' + str(int(tp1f[0])) + '\n'
        'Suspeito: ' + str(int(tp1s[0])) + '\n'
        'Reprovado: ' + str(int(tp1r[0])) + '\n'
        'Nao avaliado: ' + str(int(tp1n[0])) + '\n \n'

        '-- Dp1 / Dp2 --' '\n'
        'Aprovado: ' + str(int(dp1a[0])) + '\n'
        'Faltando: ' + str(int(dp1f[0])) + '\n'
        'Suspeito: ' + str(int(dp1s[0])) + '\n'
        'Reprovado: ' + str(int(dp1r[0])) + '\n'
        'Nao avaliado: ' + str(int(dp1n[0])) + '\n \n'

        # '-- Hm02 --' '\n'
        # 'Aprovado: ' + str(int(hm02a[0])) + '\n'
        # 'Faltando: ' + str(int(hm02f[0])) + '\n'
        # 'Suspeito: ' + str(int(hm02s[0])) + '\n'
        # 'Reprovado: ' + str(int(hm02r[0])) + '\n'
        # 'Nao avaliado: ' + str(int(hm02n[0])) + '\n \n'

        # '-- Tp2 --' '\n'
        # 'Aprovado: ' + str(int(tp2a[0])) + '\n'
        # 'Faltando: ' + str(int(tp2f[0])) + '\n'
        # 'Suspeito: ' + str(int(tp2s[0])) + '\n'
        # 'Reprovado: ' + str(int(tp2r[0])) + '\n'
        # 'Nao avaliado: ' + str(int(tp2n[0])) + '\n \n'

        # '-- Dp2 --' '\n'
        # 'Aprovado: ' + str(int(dp2a[0])) + '\n'
        # 'Faltando: ' + str(int(dp2f[0])) + '\n'
        # 'Suspeito: ' + str(int(dp2s[0])) + '\n'
        # 'Reprovado: ' + str(int(dp2r[0])) + '\n'
        # 'Nao avaliado: ' + str(int(dp2n[0])) + '\n \n'


        # ================================================================================== #

        '\n' + regua1 + '\n'
        '** Teste 2 - Variabilidade Temporal ** ' '\n \n'


        '-- Hs --' '\n'
        'Aprovado: ' + str(int(hsa[1])) + '\n'
        'Faltando: ' + str(int(hsf[1])) + '\n'
        'Suspeito: ' + str(int(hss[1])) + '\n'
        'Reprovado: ' + str(int(hsr[1])) + '\n'
        'Nao avaliado: ' + str(int(hsn[1])) + '\n \n'

        '-- H1/10 --' '\n'
        'Aprovado: ' + str(int(h10a[1])) + '\n'
        'Faltando: ' + str(int(h10f[1])) + '\n'
        'Suspeito: ' + str(int(h10s[1])) + '\n'
        'Reprovado: ' + str(int(h10r[1])) + '\n'
        'Nao avaliado: ' + str(int(h10n[1])) + '\n \n'

        '-- Hmax --' '\n'
        'Aprovado: ' + str(int(hmaxa[1])) + '\n'
        'Faltando: ' + str(int(hmaxf[1])) + '\n'
        'Suspeito: ' + str(int(hmaxs[1])) + '\n'
        'Reprovado: ' + str(int(hmaxr[1])) + '\n'
        'Nao avaliado: ' + str(int(hmaxn[1])) + '\n \n'

        '-- Tmed --' '\n'
        'Aprovado: ' + str(int(tmeda[1])) + '\n'
        'Faltando: ' + str(int(tmedf[1])) + '\n'
        'Suspeito: ' + str(int(tmeds[1])) + '\n'
        'Reprovado: ' + str(int(tmedr[1])) + '\n'
        'Nao avaliado: ' + str(int(tmedn[1])) + '\n \n'

        '-- THmax --' '\n'
        'Aprovado: ' + str(int(thmaxa[1])) + '\n'
        'Faltando: ' + str(int(thmaxf[1])) + '\n'
        'Suspeito: ' + str(int(thmaxs[1])) + '\n'
        'Reprovado: ' + str(int(thmaxr[1])) + '\n'
        'Nao avaliado: ' + str(int(thmaxn[1])) + '\n \n'

        '-- Hm0 --' '\n'
        'Aprovado: ' + str(int(hm0a[1])) + '\n'
        'Faltando: ' + str(int(hm0f[1])) + '\n'
        'Suspeito: ' + str(int(hm0s[1])) + '\n'
        'Reprovado: ' + str(int(hm0r[1])) + '\n'
        'Nao avaliado: ' + str(int(hm0n[1])) + '\n \n'

        '-- Tp --' '\n'
        'Aprovado: ' + str(int(tpa[1])) + '\n'
        'Faltando: ' + str(int(tpf[1])) + '\n'
        'Suspeito: ' + str(int(tps[1])) + '\n'
        'Reprovado: ' + str(int(tpr[1])) + '\n'
        'Nao avaliado: ' + str(int(tpn[1])) + '\n \n'

        '-- Dp --' '\n'
        'Aprovado: ' + str(int(dpa[1])) + '\n'
        'Faltando: ' + str(int(dpf[1])) + '\n'
        'Suspeito: ' + str(int(dps[1])) + '\n'
        'Reprovado: ' + str(int(dpr[1])) + '\n'
        'Nao avaliado: ' + str(int(dpn[1])) + '\n \n'

        '-- Sigma1p --' '\n'
        'Aprovado: ' + str(int(sigma1pa[1])) + '\n'
        'Faltando: ' + str(int(sigma1pf[1])) + '\n'
        'Suspeito: ' + str(int(sigma1ps[1])) + '\n'
        'Reprovado: ' + str(int(sigma1pr[1])) + '\n'
        'Nao avaliado: ' + str(int(sigma1pn[1])) + '\n \n'

        '-- Sigma2p --' '\n'
        'Aprovado: ' + str(int(sigma2pa[1])) + '\n'
        'Faltando: ' + str(int(sigma2pf[1])) + '\n'
        'Suspeito: ' + str(int(sigma2ps[1])) + '\n'
        'Reprovado: ' + str(int(sigma2pr[1])) + '\n'
        'Nao avaliado: ' + str(int(sigma2pn[1])) + '\n \n'

        '-- Hm01 / Hm02 --' '\n'
        'Aprovado: ' + str(int(hm01a[1])) + '\n'
        'Faltando: ' + str(int(hm01f[1])) + '\n'
        'Suspeito: ' + str(int(hm01s[1])) + '\n'
        'Reprovado: ' + str(int(hm01r[1])) + '\n'
        'Nao avaliado: ' + str(int(hm01n[1])) + '\n \n'

        '-- Tp1 / Tp2 --' '\n'
        'Aprovado: ' + str(int(tp1a[1])) + '\n'
        'Faltando: ' + str(int(tp1f[1])) + '\n'
        'Suspeito: ' + str(int(tp1s[1])) + '\n'
        'Reprovado: ' + str(int(tp1r[1])) + '\n'
        'Nao avaliado: ' + str(int(tp1n[1])) + '\n \n'

        '-- Dp1 / Dp2 --' '\n'
        'Aprovado: ' + str(int(dp1a[1])) + '\n'
        'Faltando: ' + str(int(dp1f[1])) + '\n'
        'Suspeito: ' + str(int(dp1s[1])) + '\n'
        'Reprovado: ' + str(int(dp1r[1])) + '\n'
        'Nao avaliado: ' + str(int(dp1n[1])) + '\n \n'


        # '-- Hm02 --' '\n'
        # 'Aprovado: ' + str(int(hm02a[1])) + '\n'
        # 'Faltando: ' + str(int(hm02f[1])) + '\n'
        # 'Suspeito: ' + str(int(hm02s[1])) + '\n'
        # 'Reprovado: ' + str(int(hm02r[1])) + '\n'
        # 'Nao avaliado: ' + str(int(hm02n[1])) + '\n \n'

        # '-- Tp2 --' '\n'
        # 'Aprovado: ' + str(int(tp2a[1])) + '\n'
        # 'Faltando: ' + str(int(tp2f[1])) + '\n'
        # 'Suspeito: ' + str(int(tp2s[1])) + '\n'
        # 'Reprovado: ' + str(int(tp2r[1])) + '\n'
        # 'Nao avaliado: ' + str(int(tp2n[1])) + '\n \n'

        # '-- Dp2 --' '\n'
        # 'Aprovado: ' + str(int(dp2a[1])) + '\n'
        # 'Faltando: ' + str(int(dp2f[1])) + '\n'
        # 'Suspeito: ' + str(int(dp2s[1])) + '\n'
        # 'Reprovado: ' + str(int(dp2r[1])) + '\n'
        # 'Nao avaliado: ' + str(int(dp2n[1])) + '\n \n'


        # ================================================================================== #

        '\n' + regua1 + '\n'
        '** Teste 3 - Conec. Iguais **' '\n \n'


        '-- Hs --' '\n'
        'Aprovado: ' + str(int(hsa[2])) + '\n'
        'Faltando: ' + str(int(hsf[2])) + '\n'
        'Suspeito: ' + str(int(hss[2])) + '\n'
        'Reprovado: ' + str(int(hsr[2])) + '\n'
        'Nao avaliado: ' + str(int(hsn[2])) + '\n \n'

        '-- H1/10 --' '\n'
        'Aprovado: ' + str(int(h10a[2])) + '\n'
        'Faltando: ' + str(int(h10f[2])) + '\n'
        'Suspeito: ' + str(int(h10s[2])) + '\n'
        'Reprovado: ' + str(int(h10r[2])) + '\n'
        'Nao avaliado: ' + str(int(h10n[2])) + '\n \n'

        '-- Hmax --' '\n'
        'Aprovado: ' + str(int(hmaxa[2])) + '\n'
        'Faltando: ' + str(int(hmaxf[2])) + '\n'
        'Suspeito: ' + str(int(hmaxs[2])) + '\n'
        'Reprovado: ' + str(int(hmaxr[2])) + '\n'
        'Nao avaliado: ' + str(int(hmaxn[2])) + '\n \n'

        '-- Tmed --' '\n'
        'Aprovado: ' + str(int(tmeda[2])) + '\n'
        'Faltando: ' + str(int(tmedf[2])) + '\n'
        'Suspeito: ' + str(int(tmeds[2])) + '\n'
        'Reprovado: ' + str(int(tmedr[2])) + '\n'
        'Nao avaliado: ' + str(int(tmedn[2])) + '\n \n'

        '-- THmax --' '\n'
        'Aprovado: ' + str(int(thmaxa[2])) + '\n'
        'Faltando: ' + str(int(thmaxf[2])) + '\n'
        'Suspeito: ' + str(int(thmaxs[2])) + '\n'
        'Reprovado: ' + str(int(thmaxr[2])) + '\n'
        'Nao avaliado: ' + str(int(thmaxn[2])) + '\n \n'

        '-- Hm0 --' '\n'
        'Aprovado: ' + str(int(hm0a[2])) + '\n'
        'Faltando: ' + str(int(hm0f[2])) + '\n'
        'Suspeito: ' + str(int(hm0s[2])) + '\n'
        'Reprovado: ' + str(int(hm0r[2])) + '\n'
        'Nao avaliado: ' + str(int(hm0n[2])) + '\n \n'

        '-- Tp --' '\n'
        'Aprovado: ' + str(int(tpa[2])) + '\n'
        'Faltando: ' + str(int(tpf[2])) + '\n'
        'Suspeito: ' + str(int(tps[2])) + '\n'
        'Reprovado: ' + str(int(tpr[2])) + '\n'
        'Nao avaliado: ' + str(int(tpn[2])) + '\n \n'

        '-- Dp --' '\n'
        'Aprovado: ' + str(int(dpa[2])) + '\n'
        'Faltando: ' + str(int(dpf[2])) + '\n'
        'Suspeito: ' + str(int(dps[2])) + '\n'
        'Reprovado: ' + str(int(dpr[2])) + '\n'
        'Nao avaliado: ' + str(int(dpn[2])) + '\n \n'

        '-- Sigma1p --' '\n'
        'Aprovado: ' + str(int(sigma1pa[2])) + '\n'
        'Faltando: ' + str(int(sigma1pf[2])) + '\n'
        'Suspeito: ' + str(int(sigma1ps[2])) + '\n'
        'Reprovado: ' + str(int(sigma1pr[2])) + '\n'
        'Nao avaliado: ' + str(int(sigma1pn[2])) + '\n \n'

        '-- Sigma2p --' '\n'
        'Aprovado: ' + str(int(sigma2pa[2])) + '\n'
        'Faltando: ' + str(int(sigma2pf[2])) + '\n'
        'Suspeito: ' + str(int(sigma2ps[2])) + '\n'
        'Reprovado: ' + str(int(sigma2pr[2])) + '\n'
        'Nao avaliado: ' + str(int(sigma2pn[2])) + '\n \n'

        '-- Hm01 / Hm02--' '\n'
        'Aprovado: ' + str(int(hm01a[2])) + '\n'
        'Faltando: ' + str(int(hm01f[2])) + '\n'
        'Suspeito: ' + str(int(hm01s[2])) + '\n'
        'Reprovado: ' + str(int(hm01r[2])) + '\n'
        'Nao avaliado: ' + str(int(hm01n[2])) + '\n \n'

        '-- Tp1 / Tp2 --' '\n'
        'Aprovado: ' + str(int(tp1a[2])) + '\n'
        'Faltando: ' + str(int(tp1f[2])) + '\n'
        'Suspeito: ' + str(int(tp1s[2])) + '\n'
        'Reprovado: ' + str(int(tp1r[2])) + '\n'
        'Nao avaliado: ' + str(int(tp1n[2])) + '\n \n'

        '-- Dp1 / Dp1 --' '\n'
        'Aprovado: ' + str(int(dp1a[2])) + '\n'
        'Faltando: ' + str(int(dp1f[2])) + '\n'
        'Suspeito: ' + str(int(dp1s[2])) + '\n'
        'Reprovado: ' + str(int(dp1r[2])) + '\n'
        'Nao avaliado: ' + str(int(dp1n[2])) + '\n \n'

        # '-- Hm02 --' '\n'
        # 'Aprovado: ' + str(int(hm02a[2])) + '\n'
        # 'Faltando: ' + str(int(hm02f[2])) + '\n'
        # 'Suspeito: ' + str(int(hm02s[2])) + '\n'
        # 'Reprovado: ' + str(int(hm02r[2])) + '\n'
        # 'Nao avaliado: ' + str(int(hm02n[2])) + '\n \n'

        # '-- Tp2 --' '\n'
        # 'Aprovado: ' + str(int(tp2a[2])) + '\n'
        # 'Faltando: ' + str(int(tp2f[2])) + '\n'
        # 'Suspeito: ' + str(int(tp2s[2])) + '\n'
        # 'Reprovado: ' + str(int(tp2r[2])) + '\n'
        # 'Nao avaliado: ' + str(int(tp2n[2])) + '\n \n'

        # '-- Dp2 --' '\n'
        # 'Aprovado: ' + str(int(dp2a[2])) + '\n'
        # 'Faltando: ' + str(int(dp2f[2])) + '\n'
        # 'Suspeito: ' + str(int(dp2s[2])) + '\n'
        # 'Reprovado: ' + str(int(dp2r[2])) + '\n'
        # 'Nao avaliado: ' + str(int(dp2n[2])) + '\n \n'


        # ================================================================================== #

    )
    f.close()

    # flag com resltado da quantidade de flags (9x9 -- linha=variaveis (ex:l1 = etaa, l2=etas ..) x coluna=testes (ex:c1=t2, c2=t2 ..))
    fflagb = np.concatenate([(etaa, etas, etar, etaxa, etaxs, etaxr, etaya, etays, etayr)])
    fflagp = np.concatenate([(fhs,fh10,fhmax,ftmed,fthmax,fhm0,ftp,fdp,fsigma1p,fsigma2p,fhm01,ftp1,fdp1,fhm02,ftp2,fdp2)])

    return fflagb, fflagp

